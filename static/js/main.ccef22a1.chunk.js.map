{"version":3,"sources":["components/helper.js","components/target.js","App.js","serviceWorker.js","index.js"],"names":["random","min","max","r","Math","floor","Target","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","nextProps","nextState","props","number","bonus","url","style","left","top","visibility","backgroundImage","react_default","a","createElement","className","React","Component","App","_this","call","state","game","targets","latestClick","sum","clock","hitTarget","bind","assertThisInitialized","startGame","endGame","handleClick","intervals","prevProps","prevState","forEach","timeID","clearInterval","ms","_this2","index","length","push","setInterval","slice","num","setState","e","target","isNaN","innerText","Number","toFixed","createTarget","_this3","startTime","Date","now","int","_this$state","onClick","map","i","target_Target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccef22a1.chunk.js","sourcesContent":["export let random = (min, max) => {\r\n  let r = Math.random();\r\n  return Math.floor(r * (max - min) + min);\r\n};\r\n\r\n\r\nexport let clone = (obj) => {\r\n  let newObj = {};\r\n  for (let prop in obj) {\r\n    if (obj.hasOwnProperty(prop)) {\r\n      newObj[prop] = obj[prop];\r\n    }\r\n  }\r\n  return newObj;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { random } from './helper';\r\n\r\nexport class Target extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return this.props.number !== nextProps.number;\r\n  }\r\n\r\n  render() {  \r\n    const bonus = random(0, 10) > 5;\r\n    const url1 = 'https://tse3.mm.bing.net/th?id=OIP.gFt-uqmVIilT_yUH-bpL8gHaHa&pid=Api&w=512&h=512&rs=1&p=0';\r\n    const url2 = 'http://hbimg.b0.upaiyun.com/9987ece1f9b26eb2ff6f3489397c6b8a590f359110c1ea-vjzPlB_fw658';\r\n    const url = bonus? url1 : url2;   \r\n    const number = bonus? this.props.number : '.';\r\n\r\n\r\n    let style = {      \r\n      left: random(0, 100) + '%',\r\n      top: random(0, 100) + '%',\r\n      visibility: number? 'visible' : 'hidden' ,\r\n      backgroundImage: \"url(\" + url + \")\"\r\n    };\r\n\r\n    return (\r\n      <span className=\"target\" style={style} >\r\n        {number}\r\n      </span>\r\n    )\r\n  }\r\n}\r\n\r\nTarget.propTypes = {\r\n  number: PropTypes.number.isRequired\r\n};","import React from 'react';\r\nimport { Target } from './components/target';\r\nimport { random } from './components/helper'; \r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      game: false,\r\n      targets: [],\r\n      latestClick: 0,\r\n      sum: 0,\r\n      clock: 0\r\n    };\r\n\r\n    this.hitTarget = this.hitTarget.bind(this);\r\n    this.startGame = this.startGame.bind(this);\r\n    this.endGame = this.endGame.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentWillMount() {    \r\n    this.intervals = [];   \r\n  }\r\n\r\n  // componentWillUpdate(nextProps, nextState) {\r\n  //   const yellow = 'rgb(255, 215, 18)';    \r\n  //   if (document.body.style.background !== yellow && this.state.sum >= 100) {\r\n  //     document.body.style.background = yellow;\r\n  //   }\r\n  //   if (document.body.style.background !== \"red\" && this.state.sum <= -10) {\r\n  //     document.body.style.background = \"red\";\r\n  //   }\r\n  // }\r\n\r\n  componentWillUnmount(prevProps, prevState) { \r\n      this.intervals.forEach((timeID) => {\r\n        clearInterval(timeID);\r\n      });  \r\n       clearInterval(this.timeID);   \r\n  }\r\n\r\n  createTarget(ms) { \r\n   const index = this.state.targets.length;   \r\n\r\n    this.intervals.push(\r\n      setInterval( () => {\r\n        let targets = this.state.targets.slice();\r\n        let num = random(0, 1000) / 100;       \r\n        targets[index] = targets[index]? 0 : num ;\r\n        this.setState({ targets });\r\n      }, ms));\r\n  }\r\n\r\n  hitTarget(e) {\r\n    if (e.target.className !== 'target') return;   \r\n    if (isNaN(e.target.innerText)) return;\r\n\r\n    let num = Number(e.target.innerText);\r\n\r\n    let sum = Number(this.state.sum);\r\n\r\n    sum = (sum + num).toFixed(2);\r\n\r\n    this.setState({ \r\n      latestClick: num, \r\n      sum \r\n    }); \r\n\r\n    this.createTarget( random(500, 3000) );  \r\n  }\r\n\r\n  handleClick() {\r\n    if(this.state.game) {\r\n      this.endGame();\r\n    } else {\r\n      this.startGame();\r\n    }\r\n  }\r\n\r\n  startGame() {\r\n    this.createTarget(1000);\r\n    this.createTarget(1500);\r\n    this.createTarget(2000);\r\n\r\n    let startTime = Date.now() - this.state.clock;\r\n    this.timeID = setInterval(() => { \r\n        this.setState({\r\n         clock: Date.now() - startTime\r\n       });         \r\n     }, 10);  \r\n\r\n    this.setState({\r\n      game: true\r\n    });\r\n  }\r\n\r\n  endGame() {\r\n    this.intervals.forEach((int) => {\r\n      clearInterval(int);\r\n    });  \r\n\r\n  clearInterval(this.timeID);  \r\n  \r\n  this.setState({\r\n     game: false,\r\n     targets: [],\r\n     latestClick: 0,\r\n     sum: 0,\r\n     clock: 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n  const {game, targets, latestClick, sum, clock} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h1>\r\n          最近一次/ Last time: {latestClick}\r\n        </h1>\r\n        <label>{clock}ms</label><br/>\r\n        <div  className='total'>\r\n          已经抢到的红包/ Total: {sum}\r\n        </div>\r\n        <button onClick={this.handleClick}>\r\n          {game ? '结束游戏/End' : '开始游戏/Start'} \r\n        </button>\r\n        <div className=\"targetArea\" onClick={this.hitTarget}>\r\n          {     \r\n            targets.map( (num,i) => \r\n              (<Target \r\n                number={num} \r\n                key={i} \r\n              />)\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}